#
#   pak-windows-default.nmake -- Makefile to build Embedthis Pak for windows
#

NAME                  = pak
VERSION               = 1.0.7

OS                    = windows
PA                    = $(PROCESSOR_ARCHITECTURE)
!IF "$(PROFILE)" == ""
PROFILE               = default
!ENDIF


!IF "$(PA)" == "AMD64"
ARCH                  = x64
CC_ARCH               = x86_64
ENTRY                 = _DllMainCRTStartup
!ELSEIF "$(PA)" == "ARM64"
ARCH                  = arm64
CC_ARCH               = aarch64
ENTRY                 = _DllMainCRTStartup@12
!ELSEIF "$(PA)" == "ARM"
ARCH                  = arm
CC_ARCH               = arm
ENTRY                 = _DllMainCRTStartup@12
!ELSE
ARCH                  = x86
CC_ARCH               = i686
ENTRY                 = _DllMainCRTStartup@12
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG                = $(OS)-$(ARCH)-$(PROFILE)
!ENDIF

!IF "$(BUILD)" == ""
BUILD                 = build\$(CONFIG)
!ENDIF

LBIN                  = $(BUILD)\bin

#
# Components
#
!IF "$(ME_COM_COMPILER)" == ""
ME_COM_COMPILER       = 1
!ENDIF
!IF "$(ME_COM_EJSCRIPT)" == ""
ME_COM_EJSCRIPT       = 1
!ENDIF
!IF "$(ME_COM_HTTP)" == ""
ME_COM_HTTP           = 1
!ENDIF
!IF "$(ME_COM_LIB)" == ""
ME_COM_LIB            = 1
!ENDIF
!IF "$(ME_COM_LINK)" == ""
ME_COM_LINK           = 1
!ENDIF
!IF "$(ME_COM_MATRIXSSL)" == ""
ME_COM_MATRIXSSL      = 0
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == ""
ME_COM_MBEDTLS        = 1
!ENDIF
!IF "$(ME_COM_MPR)" == ""
ME_COM_MPR            = 1
!ENDIF
!IF "$(ME_COM_NANOSSL)" == ""
ME_COM_NANOSSL        = 0
!ENDIF
!IF "$(ME_COM_OPENSSL)" == ""
ME_COM_OPENSSL        = 0
!ENDIF
!IF "$(ME_COM_OSDEP)" == ""
ME_COM_OSDEP          = 1
!ENDIF
!IF "$(ME_COM_PCRE)" == ""
ME_COM_PCRE           = 1
!ENDIF
!IF "$(ME_COM_RC)" == ""
ME_COM_RC             = 1
!ENDIF
!IF "$(ME_COM_SQLITE)" == ""
ME_COM_SQLITE         = 0
!ENDIF
!IF "$(ME_COM_SSL)" == ""
ME_COM_SSL            = 1
!ENDIF
!IF "$(ME_COM_VXWORKS)" == ""
ME_COM_VXWORKS        = 0
!ENDIF
!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF

!IF "$(ME_COM_OPENSSL_PATH)" == ""
ME_COM_OPENSSL_PATH   = "/path/to/openssl"
!ENDIF

!IF "$(ME_COM_LIB)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_LINK)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
ME_COM_SSL            = 1
!ENDIF

!IF "$(ME_COM_RC)" == "1"
ME_COM_COMPILER       = 1
!ENDIF

!IF "$(ME_COM_ZLIB)" == ""
ME_COM_ZLIB           = 1
!ENDIF


#
# Settings
#
!IF "$(ME_AUTHOR)" == ""
ME_AUTHOR             = \"Embedthis Software\"
!ENDIF
!IF "$(ME_CERTS_BITS)" == ""
ME_CERTS_BITS         = 2048
!ENDIF
!IF "$(ME_CERTS_DAYS)" == ""
ME_CERTS_DAYS         = 3650
!ENDIF
!IF "$(ME_CERTS_GENDH)" == ""
ME_CERTS_GENDH        = 0
!ENDIF
!IF "$(ME_COMPANY)" == ""
ME_COMPANY            = \"embedthis\"
!ENDIF
!IF "$(ME_COMPATIBLE)" == ""
ME_COMPATIBLE         = \"1.0\"
!ENDIF
!IF "$(ME_COMPILER_HAS_ATOMIC)" == ""
ME_COMPILER_HAS_ATOMIC = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_ATOMIC64)" == ""
ME_COMPILER_HAS_ATOMIC64 = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_DYN_LOAD)" == ""
ME_COMPILER_HAS_DYN_LOAD = 1
!ENDIF
!IF "$(ME_COMPILER_HAS_LIB_EDIT)" == ""
ME_COMPILER_HAS_LIB_EDIT = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_LIB_RT)" == ""
ME_COMPILER_HAS_LIB_RT = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_MMU)" == ""
ME_COMPILER_HAS_MMU   = 1
!ENDIF
!IF "$(ME_COMPILER_HAS_STACK_PROTECTOR)" == ""
ME_COMPILER_HAS_STACK_PROTECTOR = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_SYNC)" == ""
ME_COMPILER_HAS_SYNC  = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_SYNC64)" == ""
ME_COMPILER_HAS_SYNC64 = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_SYNC_CAS)" == ""
ME_COMPILER_HAS_SYNC_CAS = 0
!ENDIF
!IF "$(ME_COMPILER_HAS_UNNAMED_UNIONS)" == ""
ME_COMPILER_HAS_UNNAMED_UNIONS = 1
!ENDIF
!IF "$(ME_CONFIGURE)" == ""
ME_CONFIGURE          = \"me -d -q -platform windows-x86-default -configure . -gen nmake\"
!ENDIF
!IF "$(ME_CONFIGURED)" == ""
ME_CONFIGURED         = 1
!ENDIF
!IF "$(ME_DEBUG)" == ""
ME_DEBUG              = 1
!ENDIF
!IF "$(ME_DEPTH)" == ""
ME_DEPTH              = 1
!ENDIF
!IF "$(ME_DESCRIPTION)" == ""
ME_DESCRIPTION        = \"Embedthis Pak Manager\"
!ENDIF
!IF "$(ME_EJS_ONE_MODULE)" == ""
ME_EJS_ONE_MODULE     = 1
!ENDIF
!IF "$(ME_EJSCRIPT_COMPILE)" == ""
ME_EJSCRIPT_COMPILE   = \"--debug\"
!ENDIF
!IF "$(ME_EJSCRIPT_DB)" == ""
ME_EJSCRIPT_DB        = 0
!ENDIF
!IF "$(ME_EJSCRIPT_MAIL)" == ""
ME_EJSCRIPT_MAIL      = 0
!ENDIF
!IF "$(ME_EJSCRIPT_MAPPER)" == ""
ME_EJSCRIPT_MAPPER    = 0
!ENDIF
!IF "$(ME_EJSCRIPT_SHELL)" == ""
ME_EJSCRIPT_SHELL     = 0
!ENDIF
!IF "$(ME_EJSCRIPT_TAR)" == ""
ME_EJSCRIPT_TAR       = 1
!ENDIF
!IF "$(ME_EJSCRIPT_TEMPLATE)" == ""
ME_EJSCRIPT_TEMPLATE  = 0
!ENDIF
!IF "$(ME_EJSCRIPT_WEB)" == ""
ME_EJSCRIPT_WEB       = 0
!ENDIF
!IF "$(ME_EJSCRIPT_ZLIB)" == ""
ME_EJSCRIPT_ZLIB      = 1
!ENDIF
!IF "$(ME_HTTP_PAM)" == ""
ME_HTTP_PAM           = 0
!ENDIF
!IF "$(ME_INTEGRATE)" == ""
ME_INTEGRATE          = 1
!ENDIF
!IF "$(ME_MANIFEST)" == ""
ME_MANIFEST           = \"installs/manifest.me\"
!ENDIF
!IF "$(ME_MBEDTLS_COMPACT)" == ""
ME_MBEDTLS_COMPACT    = 1
!ENDIF
!IF "$(ME_MPR_LOGGING)" == ""
ME_MPR_LOGGING        = 1
!ENDIF
!IF "$(ME_NAME)" == ""
ME_NAME               = \"pak\"
!ENDIF
!IF "$(ME_PARTS)" == ""
ME_PARTS              = \"undefined\"
!ENDIF
!IF "$(ME_PLATFORMS)" == ""
ME_PLATFORMS          = \"local\"
!ENDIF
!IF "$(ME_PREFIXES)" == ""
ME_PREFIXES           = \"install-prefixes\"
!ENDIF
!IF "$(ME_TITLE)" == ""
ME_TITLE              = \"Embedthis Pak\"
!ENDIF
!IF "$(ME_TUNE)" == ""
ME_TUNE               = \"speed\"
!ENDIF
!IF "$(ME_VERSION)" == ""
ME_VERSION            = \"1.0.7\"
!ENDIF

CC                    = cl
LD                    = link
AR                    = lib
RC                    = rc
CFLAGS                = -nologo -GR- -W3 -Zi -Od -MDd
DFLAGS                = -DME_DEBUG=1 -DME_COM_COMPILER=$(ME_COM_COMPILER) -DME_COM_EJSCRIPT=$(ME_COM_EJSCRIPT) -DME_COM_HTTP=$(ME_COM_HTTP) -DME_COM_LIB=$(ME_COM_LIB) -DME_COM_LINK=$(ME_COM_LINK) -DME_COM_MATRIXSSL=$(ME_COM_MATRIXSSL) -DME_COM_MBEDTLS=$(ME_COM_MBEDTLS) -DME_COM_MPR=$(ME_COM_MPR) -DME_COM_NANOSSL=$(ME_COM_NANOSSL) -DME_COM_OPENSSL=$(ME_COM_OPENSSL) -DME_COM_OSDEP=$(ME_COM_OSDEP) -DME_COM_PCRE=$(ME_COM_PCRE) -DME_COM_RC=$(ME_COM_RC) -DME_COM_SQLITE=$(ME_COM_SQLITE) -DME_COM_SSL=$(ME_COM_SSL) -DME_COM_VXWORKS=$(ME_COM_VXWORKS) -DME_COM_ZLIB=$(ME_COM_ZLIB) -DME_CERTS_BITS=$(ME_CERTS_BITS) -DME_CERTS_DAYS=$(ME_CERTS_DAYS) -DME_CERTS_GENDH=$(ME_CERTS_GENDH) -DME_EJSCRIPT_COMPILE=$(ME_EJSCRIPT_COMPILE) -DME_EJSCRIPT_DB=$(ME_EJSCRIPT_DB) -DME_EJSCRIPT_MAIL=$(ME_EJSCRIPT_MAIL) -DME_EJSCRIPT_MAPPER=$(ME_EJSCRIPT_MAPPER) -DME_EJSCRIPT_SHELL=$(ME_EJSCRIPT_SHELL) -DME_EJSCRIPT_TAR=$(ME_EJSCRIPT_TAR) -DME_EJSCRIPT_TEMPLATE=$(ME_EJSCRIPT_TEMPLATE) -DME_EJSCRIPT_WEB=$(ME_EJSCRIPT_WEB) -DME_EJSCRIPT_ZLIB=$(ME_EJSCRIPT_ZLIB) -DME_HTTP_PAM=$(ME_HTTP_PAM) -DME_MBEDTLS_COMPACT=$(ME_MBEDTLS_COMPACT) -DME_MPR_LOGGING=$(ME_MPR_LOGGING) 
IFLAGS                = -Ibuild\$(CONFIG)\inc
LDFLAGS               = -nologo -incremental:no -dynamicbase -nxcompat -debug -machine:$(ARCH)
LIBPATHS              = "-libpath:$(BUILD)\bin"
LIBS                  = ws2_32.lib advapi32.lib user32.lib kernel32.lib oldnames.lib shell32.lib

ME_ROOT_PREFIX        = C:
ME_BASE_PREFIX        = $(ME_ROOT_PREFIX)\Program Files
ME_APP_PREFIX         = $(ME_BASE_PREFIX)\Embedthis Pak
ME_VAPP_PREFIX        = $(ME_APP_PREFIX)
ME_DATA_PREFIX        = $(ME_VAPP_PREFIX)
ME_STATE_PREFIX       = $(ME_VAPP_PREFIX)
ME_BIN_PREFIX         = $(ME_VAPP_PREFIX)\bin
ME_INC_PREFIX         = $(ME_VAPP_PREFIX)\inc
ME_LIB_PREFIX         = $(ME_VAPP_PREFIX)\lib
ME_MAN_PREFIX         = $(ME_VAPP_PREFIX)\man
ME_ETC_PREFIX         = $(ME_VAPP_PREFIX)
ME_WEB_PREFIX         = $(ME_VAPP_PREFIX)\web
ME_LOG_PREFIX         = $(ME_VAPP_PREFIX)\log
ME_SPOOL_PREFIX       = $(ME_VAPP_PREFIX)\tmp
ME_CACHE_PREFIX       = $(ME_VAPP_PREFIX)\cache
ME_SRC_PREFIX         = $(ME_VAPP_PREFIX)\src


!IF "$(ME_COM_EJSCRIPT)" == "1"
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\ejs.mod
!ENDIF
TARGETS               = $(TARGETS) build\$(CONFIG)\.install-certs-modified
TARGETS               = $(TARGETS) build\$(CONFIG)\bin\pak.exe

!IFNDEF SHOW
.SILENT:
!ENDIF

all build compile: prep $(TARGETS)

.PHONY: prep

prep:
!IF "$(VSINSTALLDIR)" == ""
	echo "Visual Studio vars not set. Run vcvars.bat."
	exit 255
!ENDIF
!IF "$(ME_APP_PREFIX)" == ""
	echo "ME_APP_PREFIX not set."
	exit 255
!ENDIF
	@if not exist $(BUILD)\bin md $(BUILD)\bin
	@if not exist $(BUILD)\inc md $(BUILD)\inc
	@if not exist $(BUILD)\obj md $(BUILD)\obj
	@if not exist $(BUILD)\inc\me.h copy projects\pak-windows-default-me.h $(BUILD)\inc\me.h

!IF "$(SHOW)" != ""
	@echo ..... [Info] Use "make SHOW=1" to trace executed commands and errors.
LOG =
!ELSE
LOG = >nul
!ENDIF

clean:
	if exist "build\$(CONFIG)\obj\ejs.obj" del /Q "build\$(CONFIG)\obj\ejs.obj"
	if exist "build\$(CONFIG)\obj\ejsLib.obj" del /Q "build\$(CONFIG)\obj\ejsLib.obj"
	if exist "build\$(CONFIG)\obj\ejsc.obj" del /Q "build\$(CONFIG)\obj\ejsc.obj"
	if exist "build\$(CONFIG)\obj\http.obj" del /Q "build\$(CONFIG)\obj\http.obj"
	if exist "build\$(CONFIG)\obj\httpLib.obj" del /Q "build\$(CONFIG)\obj\httpLib.obj"
	if exist "build\$(CONFIG)\obj\mbedtls.obj" del /Q "build\$(CONFIG)\obj\mbedtls.obj"
	if exist "build\$(CONFIG)\obj\mpr-mbedtls.obj" del /Q "build\$(CONFIG)\obj\mpr-mbedtls.obj"
	if exist "build\$(CONFIG)\obj\mpr-openssl.obj" del /Q "build\$(CONFIG)\obj\mpr-openssl.obj"
	if exist "build\$(CONFIG)\obj\mprLib.obj" del /Q "build\$(CONFIG)\obj\mprLib.obj"
	if exist "build\$(CONFIG)\obj\pak.obj" del /Q "build\$(CONFIG)\obj\pak.obj"
	if exist "build\$(CONFIG)\obj\pcre.obj" del /Q "build\$(CONFIG)\obj\pcre.obj"
	if exist "build\$(CONFIG)\obj\zlib.obj" del /Q "build\$(CONFIG)\obj\zlib.obj"
	if exist "build\$(CONFIG)\bin\pak-ejsc.exe" del /Q "build\$(CONFIG)\bin\pak-ejsc.exe"
	if exist "build\$(CONFIG)\bin\pak-ejsc.lib" del /Q "build\$(CONFIG)\bin\pak-ejsc.lib"
	if exist "build\$(CONFIG)\bin\pak-ejsc.pdb" del /Q "build\$(CONFIG)\bin\pak-ejsc.pdb"
	if exist "build\$(CONFIG)\bin\pak-ejsc.exp" del /Q "build\$(CONFIG)\bin\pak-ejsc.exp"
	if exist "build\$(CONFIG)\.install-certs-modified" del /Q "build\$(CONFIG)\.install-certs-modified"
	if exist "build\$(CONFIG)\bin\libejs.dll" del /Q "build\$(CONFIG)\bin\libejs.dll"
	if exist "build\$(CONFIG)\bin\libejs.lib" del /Q "build\$(CONFIG)\bin\libejs.lib"
	if exist "build\$(CONFIG)\bin\libejs.pdb" del /Q "build\$(CONFIG)\bin\libejs.pdb"
	if exist "build\$(CONFIG)\bin\libejs.exp" del /Q "build\$(CONFIG)\bin\libejs.exp"
	if exist "build\$(CONFIG)\bin\libhttp.dll" del /Q "build\$(CONFIG)\bin\libhttp.dll"
	if exist "build\$(CONFIG)\bin\libhttp.lib" del /Q "build\$(CONFIG)\bin\libhttp.lib"
	if exist "build\$(CONFIG)\bin\libhttp.pdb" del /Q "build\$(CONFIG)\bin\libhttp.pdb"
	if exist "build\$(CONFIG)\bin\libhttp.exp" del /Q "build\$(CONFIG)\bin\libhttp.exp"
	if exist "build\$(CONFIG)\bin\libmbedtls.lib" del /Q "build\$(CONFIG)\bin\libmbedtls.lib"
	if exist "build\$(CONFIG)\bin\libmpr.dll" del /Q "build\$(CONFIG)\bin\libmpr.dll"
	if exist "build\$(CONFIG)\bin\libmpr.lib" del /Q "build\$(CONFIG)\bin\libmpr.lib"
	if exist "build\$(CONFIG)\bin\libmpr.pdb" del /Q "build\$(CONFIG)\bin\libmpr.pdb"
	if exist "build\$(CONFIG)\bin\libmpr.exp" del /Q "build\$(CONFIG)\bin\libmpr.exp"
	if exist "build\$(CONFIG)\bin\libmpr-mbedtls.lib" del /Q "build\$(CONFIG)\bin\libmpr-mbedtls.lib"
	if exist "build\$(CONFIG)\bin\libpcre.dll" del /Q "build\$(CONFIG)\bin\libpcre.dll"
	if exist "build\$(CONFIG)\bin\libpcre.lib" del /Q "build\$(CONFIG)\bin\libpcre.lib"
	if exist "build\$(CONFIG)\bin\libpcre.pdb" del /Q "build\$(CONFIG)\bin\libpcre.pdb"
	if exist "build\$(CONFIG)\bin\libpcre.exp" del /Q "build\$(CONFIG)\bin\libpcre.exp"
	if exist "build\$(CONFIG)\bin\libzlib.dll" del /Q "build\$(CONFIG)\bin\libzlib.dll"
	if exist "build\$(CONFIG)\bin\libzlib.lib" del /Q "build\$(CONFIG)\bin\libzlib.lib"
	if exist "build\$(CONFIG)\bin\libzlib.pdb" del /Q "build\$(CONFIG)\bin\libzlib.pdb"
	if exist "build\$(CONFIG)\bin\libzlib.exp" del /Q "build\$(CONFIG)\bin\libzlib.exp"
	if exist "build\$(CONFIG)\bin\pak.exe" del /Q "build\$(CONFIG)\bin\pak.exe"
	if exist "build\$(CONFIG)\bin\pak.lib" del /Q "build\$(CONFIG)\bin\pak.lib"
	if exist "build\$(CONFIG)\bin\pak.pdb" del /Q "build\$(CONFIG)\bin\pak.pdb"
	if exist "build\$(CONFIG)\bin\pak.exp" del /Q "build\$(CONFIG)\bin\pak.exp"

#
#   me.h
#

build\$(CONFIG)\inc\me.h: $(DEPS_1)

#
#   osdep.h
#
DEPS_2 = $(DEPS_2) src\osdep\osdep.h
DEPS_2 = $(DEPS_2) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\osdep.h: $(DEPS_2)
	@echo ..... [Copy] build\$(CONFIG)\inc\osdep.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\osdep\osdep.h+modified build\$(CONFIG)\inc\osdep.h $(LOG)

#
#   mpr.h
#
DEPS_3 = $(DEPS_3) src\mpr\mpr.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\me.h
DEPS_3 = $(DEPS_3) build\$(CONFIG)\inc\osdep.h

build\$(CONFIG)\inc\mpr.h: $(DEPS_3)
	@echo ..... [Copy] build\$(CONFIG)\inc\mpr.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mpr\mpr.h+modified build\$(CONFIG)\inc\mpr.h $(LOG)

#
#   http.h
#
DEPS_4 = $(DEPS_4) src\http\http.h
DEPS_4 = $(DEPS_4) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\inc\http.h: $(DEPS_4)
	@echo ..... [Copy] build\$(CONFIG)\inc\http.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\http\http.h+modified build\$(CONFIG)\inc\http.h $(LOG)

#
#   ejs.slots.h
#

src\ejscript\ejs.slots.h: $(DEPS_5)

#
#   pcre.h
#
DEPS_6 = $(DEPS_6) src\pcre\pcre.h

build\$(CONFIG)\inc\pcre.h: $(DEPS_6)
	@echo ..... [Copy] build\$(CONFIG)\inc\pcre.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\pcre\pcre.h+modified build\$(CONFIG)\inc\pcre.h $(LOG)

#
#   zlib.h
#
DEPS_7 = $(DEPS_7) src\zlib\zlib.h
DEPS_7 = $(DEPS_7) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\inc\zlib.h: $(DEPS_7)
	@echo ..... [Copy] build\$(CONFIG)\inc\zlib.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\zlib\zlib.h+modified build\$(CONFIG)\inc\zlib.h $(LOG)

#
#   ejs.h
#
DEPS_8 = $(DEPS_8) src\ejscript\ejs.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\me.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\osdep.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\mpr.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\http.h
DEPS_8 = $(DEPS_8) src\ejscript\ejs.slots.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\pcre.h
DEPS_8 = $(DEPS_8) build\$(CONFIG)\inc\zlib.h

build\$(CONFIG)\inc\ejs.h: $(DEPS_8)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejs.h+modified build\$(CONFIG)\inc\ejs.h $(LOG)

#
#   ejs.slots.h
#
DEPS_9 = $(DEPS_9) src\ejscript\ejs.slots.h

build\$(CONFIG)\inc\ejs.slots.h: $(DEPS_9)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejs.slots.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejs.slots.h+modified build\$(CONFIG)\inc\ejs.slots.h $(LOG)

#
#   ejsByteGoto.h
#
DEPS_10 = $(DEPS_10) src\ejscript\ejsByteGoto.h

build\$(CONFIG)\inc\ejsByteGoto.h: $(DEPS_10)
	@echo ..... [Copy] build\$(CONFIG)\inc\ejsByteGoto.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\ejscript\ejsByteGoto.h+modified build\$(CONFIG)\inc\ejsByteGoto.h $(LOG)

#
#   embedtls.h
#
DEPS_11 = $(DEPS_11) src\mbedtls\embedtls.h

build\$(CONFIG)\inc\embedtls.h: $(DEPS_11)
	@echo ..... [Copy] build\$(CONFIG)\inc\embedtls.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mbedtls\embedtls.h+modified build\$(CONFIG)\inc\embedtls.h $(LOG)

#
#   mbedtls-config.h
#
DEPS_12 = $(DEPS_12) src\mbedtls\mbedtls-config.h

build\$(CONFIG)\inc\mbedtls-config.h: $(DEPS_12)
	@echo ..... [Copy] build\$(CONFIG)\inc\mbedtls-config.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mbedtls\mbedtls-config.h+modified build\$(CONFIG)\inc\mbedtls-config.h $(LOG)

#
#   mbedtls.h
#
DEPS_13 = $(DEPS_13) src\mbedtls\mbedtls.h

build\$(CONFIG)\inc\mbedtls.h: $(DEPS_13)
	@echo ..... [Copy] build\$(CONFIG)\inc\mbedtls.h
	if not exist "build\$(CONFIG)\inc" md "build\$(CONFIG)\inc"
	copy /Y /B src\mbedtls\mbedtls.h+modified build\$(CONFIG)\inc\mbedtls.h $(LOG)

#
#   mps_reader.h
#

build\$(CONFIG)\inc\mps_reader.h: $(DEPS_14)

#
#   mps_trace.h
#

build\$(CONFIG)\inc\mps_trace.h: $(DEPS_15)

#
#   crypto.h
#

build\$(CONFIG)\inc\psa\crypto.h: $(DEPS_16)

#
#   ssl_tls13_keys.h
#

build\$(CONFIG)\inc\ssl_tls13_keys.h: $(DEPS_17)

#
#   ejs.h
#

src\ejscript\ejs.h: $(DEPS_18)

#
#   ejs.obj
#
DEPS_19 = $(DEPS_19) src\ejscript\ejs.h

build\$(CONFIG)\obj\ejs.obj: \
    src\ejscript\ejs.c $(DEPS_19)
	@echo .. [Compile] build\$(CONFIG)\obj\ejs.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejs.obj -Fd$(BUILD)\obj\ejs.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\ejscript\ejs.c $(LOG)

#
#   ejsLib.obj
#
DEPS_20 = $(DEPS_20) src\ejscript\ejs.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\mpr.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\pcre.h
DEPS_20 = $(DEPS_20) build\$(CONFIG)\inc\me.h

build\$(CONFIG)\obj\ejsLib.obj: \
    src\ejscript\ejsLib.c $(DEPS_20)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsLib.obj -Fd$(BUILD)\obj\ejsLib.pdb $(CFLAGS) $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\ejscript\ejsLib.c $(LOG)

#
#   ejsc.obj
#
DEPS_21 = $(DEPS_21) src\ejscript\ejs.h

build\$(CONFIG)\obj\ejsc.obj: \
    src\ejscript\ejsc.c $(DEPS_21)
	@echo .. [Compile] build\$(CONFIG)\obj\ejsc.obj
	"$(CC)" -c -Fo$(BUILD)\obj\ejsc.obj -Fd$(BUILD)\obj\ejsc.pdb $(CFLAGS) $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\ejscript\ejsc.c $(LOG)

#
#   http.h
#

src\http\http.h: $(DEPS_22)

#
#   http.obj
#
DEPS_23 = $(DEPS_23) src\http\http.h

build\$(CONFIG)\obj\http.obj: \
    src\http\http.c $(DEPS_23)
	@echo .. [Compile] build\$(CONFIG)\obj\http.obj
	"$(CC)" -c -Fo$(BUILD)\obj\http.obj -Fd$(BUILD)\obj\http.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\http\http.c $(LOG)

#
#   httpLib.obj
#
DEPS_24 = $(DEPS_24) src\http\http.h
DEPS_24 = $(DEPS_24) build\$(CONFIG)\inc\pcre.h

build\$(CONFIG)\obj\httpLib.obj: \
    src\http\httpLib.c $(DEPS_24)
	@echo .. [Compile] build\$(CONFIG)\obj\httpLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\httpLib.obj -Fd$(BUILD)\obj\httpLib.pdb $(CFLAGS) $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\http\httpLib.c $(LOG)

#
#   mbedtls.h
#

src\mbedtls\mbedtls.h: $(DEPS_25)

#
#   mbedtls.obj
#
DEPS_26 = $(DEPS_26) src\mbedtls\mbedtls.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\psa\crypto.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\mps_reader.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\mps_trace.h
DEPS_26 = $(DEPS_26) build\$(CONFIG)\inc\ssl_tls13_keys.h

build\$(CONFIG)\obj\mbedtls.obj: \
    src\mbedtls\mbedtls.c $(DEPS_26)
	@echo .. [Compile] build\$(CONFIG)\obj\mbedtls.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mbedtls.obj -Fd$(BUILD)\obj\mbedtls.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) src\mbedtls\mbedtls.c $(LOG)

#
#   mpr-mbedtls.obj
#
DEPS_27 = $(DEPS_27) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mpr-mbedtls.obj: \
    src\mpr-mbedtls\mpr-mbedtls.c $(DEPS_27)
	@echo .. [Compile] build\$(CONFIG)\obj\mpr-mbedtls.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mpr-mbedtls.obj -Fd$(BUILD)\obj\mpr-mbedtls.pdb -nologo -GR- -Zi -Od -MDd $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" $(IFLAGS) src\mpr-mbedtls\mpr-mbedtls.c $(LOG)

#
#   mpr-openssl.obj
#
DEPS_28 = $(DEPS_28) build\$(CONFIG)\inc\mpr.h

build\$(CONFIG)\obj\mpr-openssl.obj: \
    src\mpr-openssl\mpr-openssl.c $(DEPS_28)
	@echo .. [Compile] build\$(CONFIG)\obj\mpr-openssl.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mpr-openssl.obj -Fd$(BUILD)\obj\mpr-openssl.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) "-I$(BUILD)\inc" "-I$(ME_COM_OPENSSL_PATH)\inc32" src\mpr-openssl\mpr-openssl.c $(LOG)

#
#   mpr.h
#

src\mpr\mpr.h: $(DEPS_29)

#
#   mprLib.obj
#
DEPS_30 = $(DEPS_30) src\mpr\mpr.h

build\$(CONFIG)\obj\mprLib.obj: \
    src\mpr\mprLib.c $(DEPS_30)
	@echo .. [Compile] build\$(CONFIG)\obj\mprLib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\mprLib.obj -Fd$(BUILD)\obj\mprLib.pdb $(CFLAGS) $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\mpr\mprLib.c $(LOG)

#
#   pak.obj
#
DEPS_31 = $(DEPS_31) build\$(CONFIG)\inc\ejs.h

build\$(CONFIG)\obj\pak.obj: \
    src\pak.c $(DEPS_31)
	@echo .. [Compile] build\$(CONFIG)\obj\pak.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pak.obj -Fd$(BUILD)\obj\pak.pdb $(CFLAGS) $(DFLAGS) -D_FILE_OFFSET_BITS=64 -DMBEDTLS_USER_CONFIG_FILE=\"embedtls.h\" -DME_COM_OPENSSL_PATH=$(ME_COM_OPENSSL_PATH) $(IFLAGS) "-I$(ME_COM_OPENSSL_PATH)\inc32" src\pak.c $(LOG)

#
#   pcre.h
#

src\pcre\pcre.h: $(DEPS_32)

#
#   pcre.obj
#
DEPS_33 = $(DEPS_33) build\$(CONFIG)\inc\me.h
DEPS_33 = $(DEPS_33) src\pcre\pcre.h

build\$(CONFIG)\obj\pcre.obj: \
    src\pcre\pcre.c $(DEPS_33)
	@echo .. [Compile] build\$(CONFIG)\obj\pcre.obj
	"$(CC)" -c -Fo$(BUILD)\obj\pcre.obj -Fd$(BUILD)\obj\pcre.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\pcre\pcre.c $(LOG)

#
#   zlib.h
#

src\zlib\zlib.h: $(DEPS_34)

#
#   zlib.obj
#
DEPS_35 = $(DEPS_35) build\$(CONFIG)\inc\me.h
DEPS_35 = $(DEPS_35) src\zlib\zlib.h

build\$(CONFIG)\obj\zlib.obj: \
    src\zlib\zlib.c $(DEPS_35)
	@echo .. [Compile] build\$(CONFIG)\obj\zlib.obj
	"$(CC)" -c -Fo$(BUILD)\obj\zlib.obj -Fd$(BUILD)\obj\zlib.pdb $(CFLAGS) $(DFLAGS) $(IFLAGS) src\zlib\zlib.c $(LOG)

!IF "$(ME_COM_MBEDTLS)" == "1"
#
#   libmbedtls
#
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\osdep.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\embedtls.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\mbedtls-config.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\inc\mbedtls.h
DEPS_36 = $(DEPS_36) build\$(CONFIG)\obj\mbedtls.obj

build\$(CONFIG)\bin\libmbedtls.lib: $(DEPS_36)
	@echo ..... [Link] build\$(CONFIG)\bin\libmbedtls.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmbedtls.lib "$(BUILD)\obj\mbedtls.obj" $(LOG)
!ENDIF

!IF "$(ME_COM_MBEDTLS)" == "1"
#
#   libmpr-mbedtls
#
DEPS_37 = $(DEPS_37) build\$(CONFIG)\bin\libmbedtls.lib
DEPS_37 = $(DEPS_37) build\$(CONFIG)\obj\mpr-mbedtls.obj

build\$(CONFIG)\bin\libmpr-mbedtls.lib: $(DEPS_37)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-mbedtls.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmpr-mbedtls.lib "$(BUILD)\obj\mpr-mbedtls.obj" $(LOG)
!ENDIF

!IF "$(ME_COM_OPENSSL)" == "1"
#
#   libmpr-openssl
#
DEPS_38 = $(DEPS_38) build\$(CONFIG)\obj\mpr-openssl.obj

build\$(CONFIG)\bin\libmpr-openssl.lib: $(DEPS_38)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr-openssl.lib
	"$(AR)" -nologo -out:$(BUILD)\bin\libmpr-openssl.lib "$(BUILD)\obj\mpr-openssl.obj" $(LOG)
!ENDIF

!IF "$(ME_COM_ZLIB)" == "1"
#
#   libzlib
#
DEPS_39 = $(DEPS_39) build\$(CONFIG)\inc\zlib.h
DEPS_39 = $(DEPS_39) build\$(CONFIG)\obj\zlib.obj

build\$(CONFIG)\bin\libzlib.dll: $(DEPS_39)
	@echo ..... [Link] build\$(CONFIG)\bin\libzlib.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libzlib.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\zlib.obj" $(LIBS)  $(LOG)
!ENDIF

#
#   libmpr
#
DEPS_40 = $(DEPS_40) build\$(CONFIG)\inc\osdep.h
!IF "$(ME_COM_MBEDTLS)" == "1"
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_40 = $(DEPS_40) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_40 = $(DEPS_40) build\$(CONFIG)\inc\mpr.h
DEPS_40 = $(DEPS_40) build\$(CONFIG)\obj\mprLib.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_40 = $(LIBS_40) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_40 = $(LIBS_40) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_40 = $(LIBS_40) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_40 = $(LIBS_40) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_40 = $(LIBS_40) gdi32.lib
LIBPATHS_40 = $(LIBPATHS_40) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_40 = $(LIBS_40) libeay32.lib
LIBPATHS_40 = $(LIBPATHS_40) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_40 = $(LIBS_40) ssleay32.lib
LIBPATHS_40 = $(LIBPATHS_40) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_40 = $(LIBS_40) libzlib.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_40 = $(LIBS_40) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_40 = $(LIBS_40) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_40 = $(LIBS_40) libzlib.lib
!ENDIF

build\$(CONFIG)\bin\libmpr.dll: $(DEPS_40)
	@echo ..... [Link] build\$(CONFIG)\bin\libmpr.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libmpr.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\mprLib.obj" $(LIBPATHS_40) $(LIBS_40) $(LIBS)  $(LOG)

!IF "$(ME_COM_PCRE)" == "1"
#
#   libpcre
#
DEPS_41 = $(DEPS_41) build\$(CONFIG)\inc\pcre.h
DEPS_41 = $(DEPS_41) build\$(CONFIG)\obj\pcre.obj

build\$(CONFIG)\bin\libpcre.dll: $(DEPS_41)
	@echo ..... [Link] build\$(CONFIG)\bin\libpcre.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libpcre.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\pcre.obj" $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_HTTP)" == "1"
#
#   libhttp
#
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_PCRE)" == "1"
DEPS_42 = $(DEPS_42) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_42 = $(DEPS_42) build\$(CONFIG)\inc\http.h
DEPS_42 = $(DEPS_42) build\$(CONFIG)\obj\httpLib.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_42 = $(LIBS_42) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_42 = $(LIBS_42) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_42 = $(LIBS_42) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) gdi32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libeay32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) ssleay32.lib
LIBPATHS_42 = $(LIBPATHS_42) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_42 = $(LIBS_42) libzlib.lib
!ENDIF
LIBS_42 = $(LIBS_42) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_42 = $(LIBS_42) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_42 = $(LIBS_42) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_42 = $(LIBS_42) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_42 = $(LIBS_42) libpcre.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_42 = $(LIBS_42) libpcre.lib
!ENDIF
LIBS_42 = $(LIBS_42) libmpr.lib

build\$(CONFIG)\bin\libhttp.dll: $(DEPS_42)
	@echo ..... [Link] build\$(CONFIG)\bin\libhttp.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libhttp.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\httpLib.obj" $(LIBPATHS_42) $(LIBS_42) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   libejs
#
!IF "$(ME_COM_HTTP)" == "1"
DEPS_43 = $(DEPS_43) build\$(CONFIG)\bin\libhttp.dll
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
DEPS_43 = $(DEPS_43) build\$(CONFIG)\bin\libpcre.dll
!ENDIF
DEPS_43 = $(DEPS_43) build\$(CONFIG)\bin\libmpr.dll
!IF "$(ME_COM_ZLIB)" == "1"
DEPS_43 = $(DEPS_43) build\$(CONFIG)\bin\libzlib.dll
!ENDIF
DEPS_43 = $(DEPS_43) build\$(CONFIG)\inc\ejs.h
DEPS_43 = $(DEPS_43) build\$(CONFIG)\inc\ejs.slots.h
DEPS_43 = $(DEPS_43) build\$(CONFIG)\inc\ejsByteGoto.h
DEPS_43 = $(DEPS_43) build\$(CONFIG)\obj\ejsLib.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_43 = $(LIBS_43) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_43 = $(LIBS_43) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_43 = $(LIBS_43) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_43 = $(LIBS_43) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_43 = $(LIBS_43) gdi32.lib
LIBPATHS_43 = $(LIBPATHS_43) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_43 = $(LIBS_43) libeay32.lib
LIBPATHS_43 = $(LIBPATHS_43) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_43 = $(LIBS_43) ssleay32.lib
LIBPATHS_43 = $(LIBPATHS_43) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_43 = $(LIBS_43) libzlib.lib
!ENDIF
LIBS_43 = $(LIBS_43) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_43 = $(LIBS_43) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_43 = $(LIBS_43) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_43 = $(LIBS_43) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_43 = $(LIBS_43) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_43 = $(LIBS_43) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_43 = $(LIBS_43) libpcre.lib
!ENDIF
LIBS_43 = $(LIBS_43) libmpr.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_43 = $(LIBS_43) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_43 = $(LIBS_43) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\libejs.dll: $(DEPS_43)
	@echo ..... [Link] build\$(CONFIG)\bin\libejs.dll
	"$(LD)" -dll -out:$(BUILD)\bin\libejs.dll -entry:$(ENTRY) $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsLib.obj" $(LIBPATHS_43) $(LIBS_43) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejsc
#
DEPS_44 = $(DEPS_44) build\$(CONFIG)\bin\libejs.dll
DEPS_44 = $(DEPS_44) build\$(CONFIG)\obj\ejsc.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_44 = $(LIBS_44) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_44 = $(LIBS_44) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_44 = $(LIBS_44) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_44 = $(LIBS_44) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_44 = $(LIBS_44) gdi32.lib
LIBPATHS_44 = $(LIBPATHS_44) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_44 = $(LIBS_44) libeay32.lib
LIBPATHS_44 = $(LIBPATHS_44) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_44 = $(LIBS_44) ssleay32.lib
LIBPATHS_44 = $(LIBPATHS_44) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_44 = $(LIBS_44) libzlib.lib
!ENDIF
LIBS_44 = $(LIBS_44) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_44 = $(LIBS_44) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_44 = $(LIBS_44) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_44 = $(LIBS_44) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_44 = $(LIBS_44) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_44 = $(LIBS_44) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_44 = $(LIBS_44) libpcre.lib
!ENDIF
LIBS_44 = $(LIBS_44) libmpr.lib
LIBS_44 = $(LIBS_44) libejs.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_44 = $(LIBS_44) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_44 = $(LIBS_44) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\pak-ejsc.exe: $(DEPS_44)
	@echo ..... [Link] build\$(CONFIG)\bin\pak-ejsc.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\pak-ejsc.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\ejsc.obj" $(LIBPATHS_44) $(LIBS_44) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejs.mod
#
DEPS_45 = $(DEPS_45) src\ejscript\ejs.es
DEPS_45 = $(DEPS_45) build\$(CONFIG)\bin\pak-ejsc.exe

build\$(CONFIG)\bin\ejs.mod: $(DEPS_45)
	cd src\ejscript
	@echo .. [Compile] ejs.mod
	"../../$(BUILD)/bin/pak-ejsc" --out "../../$(BUILD)/bin/ejs.mod" --debug --bind --require null ejs.es
	cd ..\..
!ENDIF

!IF "$(ME_COM_EJSCRIPT)" == "1"
#
#   ejscmd
#
DEPS_46 = $(DEPS_46) build\$(CONFIG)\bin\libejs.dll
DEPS_46 = $(DEPS_46) build\$(CONFIG)\obj\ejs.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_46 = $(LIBS_46) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_46 = $(LIBS_46) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_46 = $(LIBS_46) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) gdi32.lib
LIBPATHS_46 = $(LIBPATHS_46) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) libeay32.lib
LIBPATHS_46 = $(LIBPATHS_46) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) ssleay32.lib
LIBPATHS_46 = $(LIBPATHS_46) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_46 = $(LIBS_46) libzlib.lib
!ENDIF
LIBS_46 = $(LIBS_46) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_46 = $(LIBS_46) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_46 = $(LIBS_46) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_46 = $(LIBS_46) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_46 = $(LIBS_46) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_46 = $(LIBS_46) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_46 = $(LIBS_46) libpcre.lib
!ENDIF
LIBS_46 = $(LIBS_46) libmpr.lib
LIBS_46 = $(LIBS_46) libejs.lib
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_46 = $(LIBS_46) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_46 = $(LIBS_46) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\pak-ejs.exe: $(DEPS_46)
	@echo ..... [Link] build\$(CONFIG)\bin\pak-ejs.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\pak-ejs.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\ejs.obj" $(LIBPATHS_46) $(LIBS_46) $(LIBS)  $(LOG)
!ENDIF

!IF "$(ME_COM_HTTP)" == "1"
#
#   httpcmd
#
DEPS_47 = $(DEPS_47) build\$(CONFIG)\bin\libhttp.dll
DEPS_47 = $(DEPS_47) build\$(CONFIG)\obj\http.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_47 = $(LIBS_47) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_47 = $(LIBS_47) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_47 = $(LIBS_47) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) gdi32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libeay32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) ssleay32.lib
LIBPATHS_47 = $(LIBPATHS_47) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_47 = $(LIBS_47) libzlib.lib
!ENDIF
LIBS_47 = $(LIBS_47) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_47 = $(LIBS_47) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_47 = $(LIBS_47) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_47 = $(LIBS_47) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_47 = $(LIBS_47) libpcre.lib
!ENDIF
LIBS_47 = $(LIBS_47) libhttp.lib
!IF "$(ME_COM_PCRE)" == "1"
LIBS_47 = $(LIBS_47) libpcre.lib
!ENDIF
LIBS_47 = $(LIBS_47) libmpr.lib

build\$(CONFIG)\bin\http.exe: $(DEPS_47)
	@echo ..... [Link] build\$(CONFIG)\bin\http.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\http.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS) "$(BUILD)\obj\http.obj" $(LIBPATHS_47) $(LIBS_47) $(LIBS)  $(LOG)
!ENDIF

#
#   install-certs
#
DEPS_48 = $(DEPS_48) src\certs\samples\ca.crt
DEPS_48 = $(DEPS_48) src\certs\samples\ca.key
DEPS_48 = $(DEPS_48) src\certs\samples\ec.crt
DEPS_48 = $(DEPS_48) src\certs\samples\ec.key
DEPS_48 = $(DEPS_48) src\certs\samples\roots.crt
DEPS_48 = $(DEPS_48) src\certs\samples\self.crt
DEPS_48 = $(DEPS_48) src\certs\samples\self.key
DEPS_48 = $(DEPS_48) src\certs\samples\test.crt
DEPS_48 = $(DEPS_48) src\certs\samples\test.key

build\$(CONFIG)\.install-certs-modified: $(DEPS_48)
	@echo ..... [Copy] build\$(CONFIG)\bin
	if not exist "build\$(CONFIG)\bin" md "build\$(CONFIG)\bin"
	copy /Y /B src\certs\samples\ca.crt+modified build\$(CONFIG)\bin\ca.crt $(LOG)
	copy /Y /B src\certs\samples\ca.key+modified build\$(CONFIG)\bin\ca.key $(LOG)
	copy /Y /B src\certs\samples\ec.crt+modified build\$(CONFIG)\bin\ec.crt $(LOG)
	copy /Y /B src\certs\samples\ec.key+modified build\$(CONFIG)\bin\ec.key $(LOG)
	copy /Y /B src\certs\samples\roots.crt+modified build\$(CONFIG)\bin\roots.crt $(LOG)
	copy /Y /B src\certs\samples\self.crt+modified build\$(CONFIG)\bin\self.crt $(LOG)
	copy /Y /B src\certs\samples\self.key+modified build\$(CONFIG)\bin\self.key $(LOG)
	copy /Y /B src\certs\samples\test.crt+modified build\$(CONFIG)\bin\test.crt $(LOG)
	copy /Y /B src\certs\samples\test.key+modified build\$(CONFIG)\bin\test.key $(LOG)
	copy /Y /B nul+modified build\$(CONFIG)\.install-certs-modified $(LOG)

#
#   pak.mod
#
DEPS_49 = $(DEPS_49) paks\ejs.version\Version.es
DEPS_49 = $(DEPS_49) src\Package.es
DEPS_49 = $(DEPS_49) src\pak.es
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_49 = $(DEPS_49) build\$(CONFIG)\bin\ejs.mod
!ENDIF

build\$(CONFIG)\bin\pak.mod: $(DEPS_49)
	"./$(BUILD)/bin/pak-ejsc" --debug --out "./$(BUILD)/bin/pak.mod" --optimize 9 paks/ejs.version/Version.es src/Package.es src/pak.es

#
#   pak
#
!IF "$(ME_COM_EJSCRIPT)" == "1"
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\libejs.dll
!ENDIF
DEPS_50 = $(DEPS_50) build\$(CONFIG)\bin\pak.mod
DEPS_50 = $(DEPS_50) build\$(CONFIG)\obj\pak.obj

!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_50 = $(LIBS_50) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_50 = $(LIBS_50) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_50 = $(LIBS_50) libmbedtls.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) gdi32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libeay32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) ssleay32.lib
LIBPATHS_50 = $(LIBPATHS_50) -libpath:$(ME_COM_OPENSSL_PATH)/out32
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF
LIBS_50 = $(LIBS_50) libmpr.lib
!IF "$(ME_COM_OPENSSL)" == "1"
LIBS_50 = $(LIBS_50) libmpr-openssl.lib
!ENDIF
!IF "$(ME_COM_MBEDTLS)" == "1"
LIBS_50 = $(LIBS_50) libmpr-mbedtls.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_50 = $(LIBS_50) libpcre.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_50 = $(LIBS_50) libhttp.lib
!ENDIF
!IF "$(ME_COM_PCRE)" == "1"
LIBS_50 = $(LIBS_50) libpcre.lib
!ENDIF
LIBS_50 = $(LIBS_50) libmpr.lib
!IF "$(ME_COM_EJSCRIPT)" == "1"
LIBS_50 = $(LIBS_50) libejs.lib
!ENDIF
!IF "$(ME_COM_ZLIB)" == "1"
LIBS_50 = $(LIBS_50) libzlib.lib
!ENDIF
!IF "$(ME_COM_HTTP)" == "1"
LIBS_50 = $(LIBS_50) libhttp.lib
!ENDIF

build\$(CONFIG)\bin\pak.exe: $(DEPS_50)
	@echo ..... [Link] build\$(CONFIG)\bin\pak.exe
	"$(LD)" -nologo -out:$(BUILD)\bin\pak.exe -entry:mainCRTStartup -subsystem:console $(LDFLAGS) $(LIBPATHS)  "$(BUILD)\obj\pak.obj" $(LIBPATHS_50) $(LIBS_50) $(LIBS)  $(LOG)

#
#   installPrep
#

installPrep: $(DEPS_51)
	if [ "`id -u`" != 0 ]
	then echo "Must run as root. Rerun with sudo."
	exit 255
	fi

#
#   stop
#

stop: $(DEPS_52)
#  Omit build script stop

#
#   installBinary
#

installBinary: $(DEPS_53)
	if not exist "$(ME_VAPP_PREFIX)\man\man1" md "$(ME_VAPP_PREFIX)\man\man1"
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\pak.exe+modified "$(ME_VAPP_PREFIX)\bin\pak.exe" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\roots.crt+modified "$(ME_VAPP_PREFIX)\bin\roots.crt" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\ejs.mod+modified "$(ME_VAPP_PREFIX)\bin\ejs.mod" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\pak.mod+modified "$(ME_VAPP_PREFIX)\bin\pak.mod" $(LOG)
	if not exist "$(ME_VAPP_PREFIX)\bin" md "$(ME_VAPP_PREFIX)\bin"
	copy /Y /B build\$(CONFIG)\bin\libejs.dll+modified "$(ME_VAPP_PREFIX)\bin\libejs.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libhttp.dll+modified "$(ME_VAPP_PREFIX)\bin\libhttp.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libmpr.dll+modified "$(ME_VAPP_PREFIX)\bin\libmpr.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libpcre.dll+modified "$(ME_VAPP_PREFIX)\bin\libpcre.dll" $(LOG)
	copy /Y /B build\$(CONFIG)\bin\libzlib.dll+modified "$(ME_VAPP_PREFIX)\bin\libzlib.dll" $(LOG)

#
#   start
#

start: $(DEPS_54)
#  Omit build script start

#
#   install
#
DEPS_55 = $(DEPS_55) installPrep
DEPS_55 = $(DEPS_55) stop
DEPS_55 = $(DEPS_55) installBinary
DEPS_55 = $(DEPS_55) start

install: $(DEPS_55)
#  Omit build script install

#
#   uninstall
#
DEPS_56 = $(DEPS_56) stop

uninstall: $(DEPS_56)
#  Omit build script uninstall

#
#   uninstallBinary
#

uninstallBinary: $(DEPS_57)
	if exist "$(ME_VAPP_PREFIX)" rd /Q /S "$(ME_VAPP_PREFIX)"
	if exist "$(ME_VAPP_PREFIX)\bin" rd /Q "$(ME_VAPP_PREFIX)\bin"
	if exist "$(ME_VAPP_PREFIX)\man" rd /Q "$(ME_VAPP_PREFIX)\man"
	if exist "$(ME_VAPP_PREFIX)" rd /Q "$(ME_VAPP_PREFIX)"

#
#   version
#

version: $(DEPS_58)
	echo $(VERSION)

